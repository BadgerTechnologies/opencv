Description: Fix FTBFS on sparc64
Author: Aurelien Jarno <aurel32@debian.org>
Forwarded: not yet
Debian-Bug: 714923
Last-Update: <2013-11-11>

--- opencv-2.4.6.1+dfsg.orig/modules/core/include/opencv2/core/core.hpp
+++ opencv-2.4.6.1+dfsg/modules/core/include/opencv2/core/core.hpp
@@ -1295,7 +1295,7 @@ public:
     operator const _Tp*() const;

     _Tp* obj; //< the object pointer.
-    int* refcount; //< the associated reference counter
+    _Atomic_word* refcount; //< the associated reference counter
 };


@@ -1463,9 +1463,9 @@ class CV_EXPORTS MatAllocator
 public:
     MatAllocator() {}
     virtual ~MatAllocator() {}
-    virtual void allocate(int dims, const int* sizes, int type, int*& refcount,
+    virtual void allocate(int dims, const int* sizes, int type, _Atomic_word*& refcount,
                           uchar*& datastart, uchar*& data, size_t* step) = 0;
-    virtual void deallocate(int* refcount, uchar* datastart, uchar* data) = 0;
+    virtual void deallocate(_Atomic_word* refcount, uchar* datastart, uchar* data) = 0;
 };

 /*!
@@ -1960,7 +1960,7 @@ public:

     //! pointer to the reference counter;
     // when matrix points to user-allocated data, the pointer is NULL
-    int* refcount;
+    _Atomic_word* refcount;

     //! helper fields used in locateROI and adjustROI
     uchar* datastart;
@@ -3379,7 +3379,7 @@ public:
     {
         Hdr(int _dims, const int* _sizes, int _type);
         void clear();
-        int refcount;
+        _Atomic_word refcount;
         int dims;
         int valueOffset;
         size_t nodeSize;
--- opencv-2.4.6.1+dfsg.orig/modules/core/include/opencv2/core/gpumat.hpp
+++ opencv-2.4.6.1+dfsg/modules/core/include/opencv2/core/gpumat.hpp
@@ -301,7 +301,7 @@ namespace cv { namespace gpu

         //! pointer to the reference counter;
         // when GpuMatrix points to user-allocated data, the pointer is NULL
-        int* refcount;
+        _Atomic_word* refcount;

         //! helper fields used in locateROI and adjustROI
         uchar* datastart;
--- opencv-2.4.6.1+dfsg.orig/modules/core/include/opencv2/core/operations.hpp
+++ opencv-2.4.6.1+dfsg/modules/core/include/opencv2/core/operations.hpp
@@ -2279,7 +2279,7 @@ public:
         Hdr() : data(0), datastart(0), refcount(0), size(0), capacity(0) {};
         _Tp* data;
         _Tp* datastart;
-        int* refcount;
+        _Atomic_word* refcount;
         size_t size;
         size_t capacity;
     };
@@ -2586,7 +2586,7 @@ template<typename _Tp> inline Ptr<_Tp>::
 {
     if(obj)
     {
-        refcount = (int*)fastMalloc(sizeof(*refcount));
+        refcount = (_Atomic_word*)fastMalloc(sizeof(*refcount));
         *refcount = 1;
     }
     else
@@ -2623,7 +2623,7 @@ template<typename _Tp> inline Ptr<_Tp>::

 template<typename _Tp> inline Ptr<_Tp>& Ptr<_Tp>::operator = (const Ptr<_Tp>& _ptr)
 {
-    int* _refcount = _ptr.refcount;
+    _Atomic_word* _refcount = _ptr.refcount;
     if( _refcount )
         CV_XADD(_refcount, 1);
     release();
--- opencv-2.4.6.1+dfsg.orig/modules/core/src/gpumat.cpp
+++ opencv-2.4.6.1+dfsg/modules/core/src/gpumat.cpp
@@ -1548,7 +1548,7 @@ void cv::gpu::GpuMat::create(int _rows,
         datastart = data = static_cast<uchar*>(devPtr);
         dataend = data + nettosize;

-        refcount = static_cast<int*>(fastMalloc(sizeof(*refcount)));
+        refcount = static_cast<_Atomic_word*>(fastMalloc(sizeof(*refcount)));
         *refcount = 1;
     }
 }
--- opencv-2.4.6.1+dfsg.orig/modules/core/src/matrix.cpp
+++ opencv-2.4.6.1+dfsg/modules/core/src/matrix.cpp
@@ -213,7 +213,7 @@ void Mat::create(int d, const int* _size
         {
             size_t totalsize = alignSize(step.p[0]*size.p[0], (int)sizeof(*refcount));
             data = datastart = (uchar*)fastMalloc(totalsize + (int)sizeof(*refcount));
-            refcount = (int*)(data + totalsize);
+            refcount = (_Atomic_word*)(data + totalsize);
             *refcount = 1;
         }
         else
--- opencv-2.4.6.1+dfsg.orig/modules/core/src/system.cpp
+++ opencv-2.4.6.1+dfsg/modules/core/src/system.cpp
@@ -851,7 +851,7 @@ struct Mutex::Impl
     void unlock() { pthread_spin_unlock(&sl); }

     pthread_spinlock_t sl;
-    int refcount;
+    _Atomic_word refcount;
 };

 #else
@@ -904,4 +904,4 @@ bool Mutex::trylock() { return impl->try

 }

-/* End of file. */
\ No newline at end of file
+/* End of file. */
--- opencv-2.4.6.1+dfsg.orig/modules/gpu/include/opencv2/gpu/gpu.hpp
+++ opencv-2.4.6.1+dfsg/modules/gpu/include/opencv2/gpu/gpu.hpp
@@ -125,7 +125,7 @@ public:
     size_t step;

     uchar* data;
-    int* refcount;
+    _Atomic_word* refcount;

     uchar* datastart;
     uchar* dataend;
--- opencv-2.4.6.1+dfsg.orig/modules/python/src2/cv2.cpp
+++ opencv-2.4.6.1+dfsg/modules/python/src2/cv2.cpp
@@ -150,14 +150,14 @@ static PyObject* failmsgp(const char *fm
 static size_t REFCOUNT_OFFSET = (size_t)&(((PyObject*)0)->ob_refcnt) +
     (0x12345678 != *(const size_t*)"\x78\x56\x34\x12\0\0\0\0\0")*sizeof(int);

-static inline PyObject* pyObjectFromRefcount(const int* refcount)
+static inline PyObject* pyObjectFromRefcount(const _Atomic_word* refcount)
 {
     return (PyObject*)((size_t)refcount - REFCOUNT_OFFSET);
 }

-static inline int* refcountFromPyObject(const PyObject* obj)
+static inline _Atomic_word* refcountFromPyObject(const PyObject* obj)
 {
-    return (int*)((size_t)obj + REFCOUNT_OFFSET);
+    return (_Atomic_word*)((size_t)obj + REFCOUNT_OFFSET);
 }

 class NumpyAllocator : public MatAllocator
@@ -166,7 +166,7 @@ public:
     NumpyAllocator() {}
     ~NumpyAllocator() {}

-    void allocate(int dims, const int* sizes, int type, int*& refcount,
+    void allocate(int dims, const int* sizes, int type, _Atomic_word*& refcount,
                   uchar*& datastart, uchar*& data, size_t* step)
     {
         PyEnsureGIL gil;
@@ -199,7 +199,7 @@ public:
         datastart = data = (uchar*)PyArray_DATA(o);
     }

-    void deallocate(int* refcount, uchar*, uchar*)
+    void deallocate(_Atomic_word* refcount, uchar*, uchar*)
     {
         PyEnsureGIL gil;
         if( !refcount )
